环境变量：
xxx=F:\apache-maven-3.8.1
xxx\bin添加到path
mvn -v



项目
    src
        main（主程序java代码和配置文件）
            java（主程序java代码）
            resources（配置文件）
        test（测试文件放这，test里也可以没文件）
            java（测试程序java代码）
            resources（测试程序配置文件）
    pom.xml（maven关键配置文件）



<properties>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  <maven.compiler.source>1.8</maven.compiler.source>
  <maven.compiler.target>1.8</maven.compiler.target>
</properties>

在项目目录下（能看到src与pom.xml）的目录
mvn compile
编译main目录下，java目录中所有java文件
到classes目录下
java xxx包.xxx类

https://mvnrepository.com/


pom文件添加元素的结构
<project>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-ear-plugin</artifactId>
        <version>2.3.1</version>
      </plugin>
    </plugins>
  </build>
</project>

mvn clean 清理target文件夹
mvn compile
mvn test-compile
mvn test 执行src/test中的代码
以上(以下同理)是按顺序的，执行mvntest会把上面命令执行一遍
mvn package 打包
mvn install 会把项目打包安装到本地仓库

另：
mvn source:jar 打包源代码


Maven命令行运行java
mvn clean compile   先编译代码
mvn exec:java -Dexec.mainClass="com.wushi.MainClass"    通过exec指令执行mainClass ?在子模块下?
#需要传递参数的话，通过-D指令
mvn exec:java -Dexec.mainClass="com.wushi.MainClass" -Dexec.args="arg0 arg1 arg2"
#需要传递classpath的运行时依赖
mvn exec:java -Dexec.mainClass="com.wushi.MainClass" -Dexec.classpathScope=runtime

Maven多模块项目
mvn clean package 在根目录下
java -jar xxx.jar 在此jar目录下
